name: Build and Push Docker Images

on:
  push:
    branches: [ "QA" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build Docker image
      run: |
        docker build --label "commit_sha=${{ github.sha }}" -t ${{ secrets.DOCKER_USERNAME }}/my-html-app:latest .

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-html-app:latest

  create-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Close Existing Pull Request
        uses: peter-evans/close-pull-request@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-title: "Automated PR from QA to Main"
          comment: "Closing previous PR to create a new one."

      - name: Create Pull Request from QA to Main
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main       # Target branch
          head: QA         # Source branch
          title: "Automated PR from QA to Main"
          body: "This is an automated PR created from the QA branch to main after the latest push."
          draft: false     # Set to `true` if you want the PR to be a draft

  deploy-aws:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.AWS_EC2_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Update system and install Docker (Instance 1)
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_QA1 }} << 'EOF'
        sudo yum update -y
        if ! command -v docker &> /dev/null
        then
          echo "Docker not found, installing..."
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
        else
          echo "Docker is already installed."
        fi
        sudo systemctl start docker
        sudo systemctl enable docker
        EOF

    - name: Deploy Docker Container (Instance 1)
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_QA1 }} << 'EOF'
        sudo docker stop my-html-app || true
        sudo docker rm my-html-app || true
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-html-app:latest
        sudo docker run -d -p 8080:80 --name my-html-app ${{ secrets.DOCKER_USERNAME }}/my-html-app:latest
        EOF

    - name: Update system and install Docker (Instance 2)
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_QA2 }} << 'EOF'
        sudo yum update -y
        if ! command -v docker &> /dev/null
        then
          echo "Docker not found, installing..."
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
        else
          echo "Docker is already installed."
        fi
        sudo systemctl start docker
        sudo systemctl enable docker
        EOF

    - name: Deploy Docker Container (Instance 2)
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.AWS_EC2_HOST_QA2 }} << 'EOF'
        sudo docker stop my-html-app || true
        sudo docker rm my-html-app || true
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/my-html-app:latest
        sudo docker run -d -p 8080:80 --name my-html-app ${{ secrets.DOCKER_USERNAME }}/my-html-app:latest
        EOF
